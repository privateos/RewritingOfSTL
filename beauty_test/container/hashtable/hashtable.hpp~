

#ifndef include___beauty__allocator___simple_allocator_hpp
	#define include___beauty__allocator___simple_allocator_hpp
	#include<./beauty/allocator/simple_allocator.hpp>
#endif
#ifndef include___beauty__container__hashtable__hashtable_detail___hashtable_node_hpp
	#define include___beauty__container__hashtable__hashtable_detail___hashtable_node_hpp
	#include<./beauty/container/hashtable/hashtable_detail/hashtable_node.hpp>
#endif
#ifndef include___beauty__container__hashtable__hashtable_detail___hashtable_iterator_hpp
	#define include___beauty__container__hashtable__hashtable_detail___hashtable_iterator_hpp
	#include<./beauty/container/hashtable/hashtable_detail/hashtable_iterator.hpp>
#endif

namespace beauty{namespace container{namespace hashtable{

template<class Key, class Value, class KeyOfValue,
class EqualCompare, class HashFunction,
 class alloc = beauty::allocator::allocator>
class hashtable{
	protected:
	typedef beauty::container::hashtable::hashtable_detail::
		hashtable_node<Value>				                node;
	typedef node*                                       node_ptr;
	typedef hashtable<Key, Value, KeyOfValue,
			EqualCompare, HashFunction, alloc>              self;
	
	
	
	public:
	typedef beauty::container::hashtable::hashtable_detail::
		hashtable_iterator<Value, Value&, Value*, self>
					                                    iterator;
  	typedef beauty::container::hashtable::hashtable_detail::
  	hashtable_iterator<Value, const Value&, 
	  const Value*, self>                         const_iterator;
  	typedef Value                                     value_type;
  	typedef Value&                                     reference;
  	typedef const Value&                         const_reference;
  	typedef Value*                                       pointer;
  	typedef const Value*                           const_pointer;
  	typedef beauty::ptrdiff_t                    difference_type;
  	typedef beauty::size_t                             size_type;
  	
	
	protected:
	node_ptr *array;
	size_type num_elements;
};


}
}
}
